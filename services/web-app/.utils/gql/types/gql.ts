/* eslint-disable */
import * as types from './graphql';
import { TypedDocumentNode as DocumentNode } from '@graphql-typed-document-node/core';

/**
 * Map of all GraphQL operations in the project.
 *
 * This map has several performance disadvantages:
 * 1. It is not tree-shakeable, so it will include all operations in the project.
 * 2. It is not minifiable, so the string of a GraphQL query will be multiple times inside the bundle.
 * 3. It does not support dead code elimination, so it will add unused operations.
 *
 * Therefore it is highly recommended to use the babel-plugin for production.
 */
const documents = {
    "\n  query CollectionInfo(\n    $tokenAddress: TokensQueryInput,\n    $collectionAddress: CollectionsQueryInput,\n    $aggregateStatAddress: CollectionAddressOwnerAddressAttributesInput!,\n    $ownerCountAddress: CollectionAddressAndAttributesInput!) {\n    tokens(\n      where: $tokenAddress\n      pagination: {limit: 9}\n      networks: {network: ETHEREUM, chain: MAINNET}\n      sort: {sortKey: TOKEN_ID, sortDirection: DESC}\n    ) {\n      nodes {\n        token {\n          collectionName\n          collectionAddress\n          description\n          image {\n            url\n            mediaEncoding {\n              ... on ImageEncodingTypes {\n                thumbnail\n              }\n            }\n          }\n          metadata\n          tokenContract {\n            description\n            name\n            symbol\n            totalSupply\n            collectionAddress\n          }\n          tokenId\n        }\n      }\n      pageInfo {\n        hasNextPage\n        endCursor\n      }\n    }\n    collections(\n      networks: [{network: ETHEREUM, chain: MAINNET}]\n      sort: {sortKey: CREATED, sortDirection: ASC}\n      where: $collectionAddress\n    ) {\n      nodes {\n        address\n        name\n        symbol\n        totalSupply\n        description\n        tokenStandard\n      }\n    }\n    aggregateStat {\n      salesVolume(where: $aggregateStatAddress) {\n        usdcPrice\n      }\n      ownerCount(\n        where: $ownerCountAddress\n        networks: {network: ETHEREUM, chain: MAINNET}\n      )\n    }\n  }\n": types.CollectionInfoDocument,
    "\n  query tokenGallery($tokenAddress: TokensQueryInput, $page: PaginationInput) {\n    tokens(\n      where: $tokenAddress\n      pagination: $page\n    ) {\n      nodes {\n        token {\n          collectionName\n          collectionAddress\n          description\n          metadata\n          tokenId\n          image {\n            url\n            mediaEncoding {\n              ... on ImageEncodingTypes {\n                thumbnail\n              }\n            }\n            size\n          }\n        }\n      }\n      pageInfo {\n        hasNextPage\n        endCursor\n      }\n    }\n  }\n": types.TokenGalleryDocument,
    "\n  query tokenInfo($token: TokenInput!) {\n  token(token: $token) {\n    token {\n      collectionAddress\n      collectionName\n      description\n      owner\n      name\n      attributes {\n        displayType\n        traitType\n        value\n      }\n      image {\n        mediaEncoding {\n          ... on ImageEncodingTypes {\n            large\n            poster\n          }\n        }\n      }\n      tokenStandard\n    }\n    events(sort: {sortKey: CREATED, sortDirection: DESC}) {\n      eventType\n      transactionInfo {\n        transactionHash\n        blockTimestamp\n      }\n      properties {\n        ... on Sale {\n          saleContractAddress\n          buyerAddress\n          price {\n            usdcPrice {\n              decimal\n            }\n          }\n          saleType\n          sellerAddress\n          networkInfo {\n            chain\n          }\n        }\n        ... on TransferEvent {\n          __typename\n          fromAddress\n          toAddress\n        }\n        ... on MintEvent {\n          __typename\n          price {\n            usdcPrice {\n              decimal\n            }\n          }\n          toAddress\n        }\n      }\n    }\n  }\n}\n": types.TokenInfoDocument,
};

/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query CollectionInfo(\n    $tokenAddress: TokensQueryInput,\n    $collectionAddress: CollectionsQueryInput,\n    $aggregateStatAddress: CollectionAddressOwnerAddressAttributesInput!,\n    $ownerCountAddress: CollectionAddressAndAttributesInput!) {\n    tokens(\n      where: $tokenAddress\n      pagination: {limit: 9}\n      networks: {network: ETHEREUM, chain: MAINNET}\n      sort: {sortKey: TOKEN_ID, sortDirection: DESC}\n    ) {\n      nodes {\n        token {\n          collectionName\n          collectionAddress\n          description\n          image {\n            url\n            mediaEncoding {\n              ... on ImageEncodingTypes {\n                thumbnail\n              }\n            }\n          }\n          metadata\n          tokenContract {\n            description\n            name\n            symbol\n            totalSupply\n            collectionAddress\n          }\n          tokenId\n        }\n      }\n      pageInfo {\n        hasNextPage\n        endCursor\n      }\n    }\n    collections(\n      networks: [{network: ETHEREUM, chain: MAINNET}]\n      sort: {sortKey: CREATED, sortDirection: ASC}\n      where: $collectionAddress\n    ) {\n      nodes {\n        address\n        name\n        symbol\n        totalSupply\n        description\n        tokenStandard\n      }\n    }\n    aggregateStat {\n      salesVolume(where: $aggregateStatAddress) {\n        usdcPrice\n      }\n      ownerCount(\n        where: $ownerCountAddress\n        networks: {network: ETHEREUM, chain: MAINNET}\n      )\n    }\n  }\n"): (typeof documents)["\n  query CollectionInfo(\n    $tokenAddress: TokensQueryInput,\n    $collectionAddress: CollectionsQueryInput,\n    $aggregateStatAddress: CollectionAddressOwnerAddressAttributesInput!,\n    $ownerCountAddress: CollectionAddressAndAttributesInput!) {\n    tokens(\n      where: $tokenAddress\n      pagination: {limit: 9}\n      networks: {network: ETHEREUM, chain: MAINNET}\n      sort: {sortKey: TOKEN_ID, sortDirection: DESC}\n    ) {\n      nodes {\n        token {\n          collectionName\n          collectionAddress\n          description\n          image {\n            url\n            mediaEncoding {\n              ... on ImageEncodingTypes {\n                thumbnail\n              }\n            }\n          }\n          metadata\n          tokenContract {\n            description\n            name\n            symbol\n            totalSupply\n            collectionAddress\n          }\n          tokenId\n        }\n      }\n      pageInfo {\n        hasNextPage\n        endCursor\n      }\n    }\n    collections(\n      networks: [{network: ETHEREUM, chain: MAINNET}]\n      sort: {sortKey: CREATED, sortDirection: ASC}\n      where: $collectionAddress\n    ) {\n      nodes {\n        address\n        name\n        symbol\n        totalSupply\n        description\n        tokenStandard\n      }\n    }\n    aggregateStat {\n      salesVolume(where: $aggregateStatAddress) {\n        usdcPrice\n      }\n      ownerCount(\n        where: $ownerCountAddress\n        networks: {network: ETHEREUM, chain: MAINNET}\n      )\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query tokenGallery($tokenAddress: TokensQueryInput, $page: PaginationInput) {\n    tokens(\n      where: $tokenAddress\n      pagination: $page\n    ) {\n      nodes {\n        token {\n          collectionName\n          collectionAddress\n          description\n          metadata\n          tokenId\n          image {\n            url\n            mediaEncoding {\n              ... on ImageEncodingTypes {\n                thumbnail\n              }\n            }\n            size\n          }\n        }\n      }\n      pageInfo {\n        hasNextPage\n        endCursor\n      }\n    }\n  }\n"): (typeof documents)["\n  query tokenGallery($tokenAddress: TokensQueryInput, $page: PaginationInput) {\n    tokens(\n      where: $tokenAddress\n      pagination: $page\n    ) {\n      nodes {\n        token {\n          collectionName\n          collectionAddress\n          description\n          metadata\n          tokenId\n          image {\n            url\n            mediaEncoding {\n              ... on ImageEncodingTypes {\n                thumbnail\n              }\n            }\n            size\n          }\n        }\n      }\n      pageInfo {\n        hasNextPage\n        endCursor\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query tokenInfo($token: TokenInput!) {\n  token(token: $token) {\n    token {\n      collectionAddress\n      collectionName\n      description\n      owner\n      name\n      attributes {\n        displayType\n        traitType\n        value\n      }\n      image {\n        mediaEncoding {\n          ... on ImageEncodingTypes {\n            large\n            poster\n          }\n        }\n      }\n      tokenStandard\n    }\n    events(sort: {sortKey: CREATED, sortDirection: DESC}) {\n      eventType\n      transactionInfo {\n        transactionHash\n        blockTimestamp\n      }\n      properties {\n        ... on Sale {\n          saleContractAddress\n          buyerAddress\n          price {\n            usdcPrice {\n              decimal\n            }\n          }\n          saleType\n          sellerAddress\n          networkInfo {\n            chain\n          }\n        }\n        ... on TransferEvent {\n          __typename\n          fromAddress\n          toAddress\n        }\n        ... on MintEvent {\n          __typename\n          price {\n            usdcPrice {\n              decimal\n            }\n          }\n          toAddress\n        }\n      }\n    }\n  }\n}\n"): (typeof documents)["\n  query tokenInfo($token: TokenInput!) {\n  token(token: $token) {\n    token {\n      collectionAddress\n      collectionName\n      description\n      owner\n      name\n      attributes {\n        displayType\n        traitType\n        value\n      }\n      image {\n        mediaEncoding {\n          ... on ImageEncodingTypes {\n            large\n            poster\n          }\n        }\n      }\n      tokenStandard\n    }\n    events(sort: {sortKey: CREATED, sortDirection: DESC}) {\n      eventType\n      transactionInfo {\n        transactionHash\n        blockTimestamp\n      }\n      properties {\n        ... on Sale {\n          saleContractAddress\n          buyerAddress\n          price {\n            usdcPrice {\n              decimal\n            }\n          }\n          saleType\n          sellerAddress\n          networkInfo {\n            chain\n          }\n        }\n        ... on TransferEvent {\n          __typename\n          fromAddress\n          toAddress\n        }\n        ... on MintEvent {\n          __typename\n          price {\n            usdcPrice {\n              decimal\n            }\n          }\n          toAddress\n        }\n      }\n    }\n  }\n}\n"];

/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 *
 *
 * @example
 * ```ts
 * const query = gql(`query GetUser($id: ID!) { user(id: $id) { name } }`);
 * ```
 *
 * The query argument is unknown!
 * Please regenerate the types.
**/
export function gql(source: string): unknown;

export function gql(source: string) {
  return (documents as any)[source] ?? {};
}

export type DocumentType<TDocumentNode extends DocumentNode<any, any>> = TDocumentNode extends DocumentNode<  infer TType,  any>  ? TType  : never;